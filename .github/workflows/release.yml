# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ release ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1'
      - run: go mod download
      - run: go test
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [amd64]
        # We sometimes use different verbiage for things (e.g. "darwin"
        # for the GOOS build flag and "osx" in the actual release ZIP).
        # We need to specify those here.
        include:
          - os: windows-latest
            goos: windows
            bin: 'log-collector.exe'
            releaseos: windows
          - os: ubuntu-latest
            goos: linux
            bin: 'log-collector'
            releaseos: linux
          - os: macos-latest
            goos: darwin
            bin: 'log-collector'
            releaseos: osx
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1'
      - name: Setup Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y gcc-multilib
      - uses: actions/checkout@v2
      - name: Build ${{ matrix.goos }}/${{ matrix.arch }}
        run: go build -o ${{ matrix.bin }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
      - name: Upload to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: log-collector-${{ matrix.releaseos }}-${{ matrix.arch }}
          path: ${{ matrix.bin }}
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v2
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_committer_email: automations@thoronic.com
          git_committer_name: Automations
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSWORD }}
      - name: Conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.ADMIN_TOKEN }}
          git-user-name: Automations
          git-user-email: automations@thoronic.com
          skip-on-empty: 'true'
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
          draft: false
          prerelease: false
      - name: Set up QEMU
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: rfizzle/log-collector:latest,rfizzle/log-collector:${{ steps.changelog.outputs.version }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Push changes
        uses: ad-m/github-push-action@master
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        with:
          github_token: ${{ secrets.ADMIN_TOKEN }}
      - name: Download built binary
        uses: actions/download-artifact@v2
        with:
          path: bin
      - name: Package Releases
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        run: |
          mkdir releases;
          for RELEASE_DIR in bin/*
          do
            echo "Creating release $RELEASE_DIR"
            for BINARY in $RELEASE_DIR/*
            do
              cp $BINARY .;
              zip -r releases/$(basename $RELEASE_DIR).zip \
                $(basename ${BINARY}) \
                README.md \
                LICENSE;
              rm $BINARY;
            done
          done
      - name: Upload Archives to Release
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
          API_HEADER: "Accept: application/vnd.github.v3+json"
          AUTH_HEADER: "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        run: |
          UPLOAD_URL=$(echo -n $UPLOAD_URL | sed s/\{.*//g)
          for FILE in releases/*
          do
            echo "Uploading ${FILE}";
            curl \
              -H "${API_HEADER}" \
              -H "${AUTH_HEADER}" \
              -H "Content-Type: $(file -b --mime-type ${FILE})" \
              --data-binary "@${FILE}" \
              "${UPLOAD_URL}?name=$(basename ${FILE})";
          done